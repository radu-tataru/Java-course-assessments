{
  "stepNumber": 1,
  "stepTitle": "Basic File Reading Assessment",
  "description": "Test your understanding of file I/O operations in Java",
  "timeLimit": 30,
  "passingScore": 70,
  "questions": [
    {
      "id": "step1-q1",
      "type": "multiple_choice",
      "question": "Which Java class is most suitable for reading text files line by line?",
      "answers": [
        { "text": "FileReader", "explanation": "FileReader reads characters but doesn't provide line-by-line reading" },
        { "text": "BufferedReader", "explanation": "Correct! BufferedReader provides the readLine() method for efficient line reading" },
        { "text": "FileInputStream", "explanation": "FileInputStream is for reading raw bytes, not suitable for text files" },
        { "text": "Scanner", "explanation": "Scanner can read lines but BufferedReader is more efficient for simple text reading" }
      ],
      "correctAnswer": 1,
      "explanation": "BufferedReader is the best choice for reading text files line by line because it provides the readLine() method and buffers the input for better performance.",
      "difficulty": "beginner",
      "points": 10
    },
    {
      "id": "step1-q2",
      "type": "code_reading",
      "question": "What does this code do?",
      "code": "try (BufferedReader reader = new BufferedReader(new FileReader(\"data.txt\"))) {\n    String line;\n    while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n    }\n} catch (IOException e) {\n    System.err.println(\"Error: \" + e.getMessage());\n}",
      "answers": [
        { "text": "Reads the first line of data.txt and prints it" },
        { "text": "Reads all lines from data.txt and prints each line to the console" },
        { "text": "Creates a new file called data.txt" },
        { "text": "Counts the number of lines in data.txt" }
      ],
      "correctAnswer": 1,
      "explanation": "This code uses a try-with-resources statement to read all lines from 'data.txt' and print each line to the console. The BufferedReader is automatically closed when the try block exits.",
      "difficulty": "beginner",
      "points": 10
    },
    {
      "id": "step1-q3",
      "type": "true_false",
      "question": "The try-with-resources statement automatically closes the BufferedReader even if an exception occurs.",
      "correctAnswer": "true",
      "explanation": "True. Try-with-resources automatically calls close() on resources that implement AutoCloseable, even if an exception is thrown.",
      "difficulty": "beginner",
      "points": 5
    },
    {
      "id": "step1-q4",
      "type": "code_completion",
      "question": "Complete the missing code to read all lines from a file and return them as a List<String>:",
      "incompleteCode": "public List<String> readAllLines(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        /* TODO: Complete the while loop to read all lines */\n    }\n    return lines;\n}",
      "correctAnswer": "while ((line = reader.readLine()) != null) {\n    lines.add(line);\n}",
      "hint": "Use readLine() in a while loop condition and add each line to the list",
      "difficulty": "intermediate",
      "points": 15
    },
    {
      "id": "step1-q5",
      "type": "multiple_choice",
      "question": "What happens if you try to read from a file that doesn't exist using FileReader?",
      "answers": [
        { "text": "The program continues normally but returns null" },
        { "text": "A FileNotFoundException is thrown" },
        { "text": "An empty string is returned" },
        { "text": "The file is automatically created" }
      ],
      "correctAnswer": 1,
      "explanation": "FileNotFoundException (which extends IOException) is thrown when trying to open a file that doesn't exist.",
      "difficulty": "beginner",
      "points": 10
    },
    {
      "id": "step1-q6",
      "type": "code_reading",
      "question": "What's wrong with this CSV reading code?",
      "code": "String line = \"Apple,Orange,Banana\";\nString[] parts = line.split(\",\");\nSystem.out.println(\"First fruit: \" + parts[3]);",
      "answers": [
        { "text": "Nothing is wrong, it will print 'Banana'" },
        { "text": "Array index out of bounds - should use parts[2] for the third fruit" },
        { "text": "Should use parts[0] to get the first fruit" },
        { "text": "The split() method is incorrect" }
      ],
      "correctAnswer": 1,
      "explanation": "Arrays are zero-indexed in Java. The array has indices 0, 1, 2 for the three fruits, so parts[3] would cause an ArrayIndexOutOfBoundsException.",
      "difficulty": "intermediate",
      "points": 15
    },
    {
      "id": "step1-q7",
      "type": "coding_challenge",
      "question": "Write a method that reads a CSV file and counts how many lines contain a specific word.",
      "requirements": [
        "Method should be named 'countLinesWithWord'",
        "Take two parameters: String filePath, String searchWord",
        "Return an int representing the count",
        "Handle IOException properly",
        "Search should be case-insensitive"
      ],
      "template": "public int countLinesWithWord(String filePath, String searchWord) throws IOException {\n    // Write your code here\n    {{USER_CODE}}\n}",
      "testCases": [
        {
          "input": "test.csv contains: \"Apple,Red\\nBanana,Yellow\\nApple,Green\\nOrange,Orange\"",
          "expected": "2",
          "description": "Should find 2 lines containing 'Apple'"
        }
      ],
      "difficulty": "intermediate",
      "points": 20
    },
    {
      "id": "step1-q8",
      "type": "multiple_choice",
      "question": "When parsing JSON in Java using org.json library, which class represents a JSON array?",
      "answers": [
        { "text": "JSONList" },
        { "text": "JSONArray" },
        { "text": "JsonArray" },
        { "text": "JSONCollection" }
      ],
      "correctAnswer": 1,
      "explanation": "JSONArray is the correct class in the org.json library for representing JSON arrays.",
      "difficulty": "beginner",
      "points": 10
    },
    {
      "id": "step1-q9",
      "type": "code_completion",
      "question": "Complete the code to extract the 'name' field from each JSON object in an array:",
      "incompleteCode": "String jsonString = \"[{\\\"name\\\":\\\"John\\\", \\\"age\\\":25}, {\\\"name\\\":\\\"Jane\\\", \\\"age\\\":30}]\";\nJSONArray jsonArray = new JSONArray(jsonString);\nfor (int i = 0; i < jsonArray.length(); i++) {\n    JSONObject obj = jsonArray.getJSONObject(i);\n    /* TODO: Extract and print the name */\n}",
      "correctAnswer": "String name = obj.getString(\"name\");\nSystem.out.println(name);",
      "hint": "Use getString() method to extract the 'name' field from the JSONObject",
      "difficulty": "intermediate",
      "points": 15
    },
    {
      "id": "step1-q10",
      "type": "coding_challenge",
      "question": "Create a complete method that reads a JSON file containing an array of objects with 'url' and 'name' fields, and returns a List of just the URLs.",
      "requirements": [
        "Method named 'extractUrlsFromJsonFile'",
        "Parameter: String filePath",
        "Return: List<String> of URLs",
        "Handle both IOException and JSONException",
        "Use Files.readAllBytes() to read the file content"
      ],
      "template": "public List<String> extractUrlsFromJsonFile(String filePath) throws IOException {\n    // Write your implementation here\n    {{USER_CODE}}\n}",
      "testCases": [
        {
          "input": "JSON file contains: [{\"name\":\"Google\",\"url\":\"https://google.com\"},{\"name\":\"GitHub\",\"url\":\"https://github.com\"}]",
          "expected": "[\"https://google.com\", \"https://github.com\"]",
          "description": "Should extract both URLs from the JSON array"
        }
      ],
      "difficulty": "advanced",
      "points": 25
    }
  ]
}